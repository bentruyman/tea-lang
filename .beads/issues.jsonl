{"id":"tea-lang-1","title":"Add std.process module","description":"Introduce a `std.process` module that provides process-spawning and management primitives. Initial scope could include:\n- Running child processes with configurable stdin/stdout/stderr piping\n- Capturing process output and exit status\n- Sending signals or terminating running processes\n- Querying environment variables and current working directory\n- Cross-platform abstractions so scripts behave consistently on macOS, Linux, and Windows\nConsider ergonomic wrappers that match Tea’s async story and ensure resource cleanup is deterministic.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-23T22:38:44.685299-05:00","updated_at":"2025-10-23T22:38:44.685299-05:00"}
{"id":"tea-lang-2","title":"Add std.http module","description":"Introduce a `std.http` module to make HTTP client interactions ergonomic. Potential features include:\n- High-level request helpers for common verbs (GET, POST, PUT, DELETE)\n- Streamed and buffered response handling with access to headers, status codes, and body\n- Support for async requests, cancellation, and timeouts\n- Configurable TLS, redirects, and cookie handling\n- Minimal server utilities (mock server, request matcher) to support testing and local development.\nStrive for an API that composes cleanly with Tea’s async primitives and error handling patterns.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-23T22:38:48.408073-05:00","updated_at":"2025-10-23T22:38:48.408073-05:00"}
{"id":"tea-lang-3","title":"Add std.os module","description":"Add a `std.os` module that provides access to operating-system level facilities. Target capabilities might include:\n- File and directory inspection APIs (metadata, permissions, timestamps)\n- Portable path utilities and environment-specific separators\n- System information queries (platform, architecture, available memory)\n- Process-level helpers like current user/group, locale, and timezone\n- Low-level syscalls or FFI hooks surfaced through safe abstractions.\nFocus on cross-platform behavior first, documenting where functionality may vary by host OS.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-23T22:38:52.906211-05:00","updated_at":"2025-10-23T22:38:52.906211-05:00"}
{"id":"tea-lang-4","title":"Move std.print into std.debug module","description":"Refactor `std.print` into a dedicated `std.debug` module to tighten the standard library organization. Key steps may include:\n- Introducing a `std.debug.print` (or similar) function that re-exports current printing behavior\n- Updating existing imports/usages across examples, tests, and runtime to reference the new module\n- Keeping backwards compatibility where practical, perhaps via a deprecated shim\n- Documenting the new module layout in standard library docs and release notes\nEnsure the move aligns with the emerging module structure and keeps formatting utilities easy to discover.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-23T22:42:42.150908-05:00","updated_at":"2025-10-23T22:42:42.150908-05:00"}
{"id":"tea-lang-5","title":"Add GitHub Action for PR builds","description":"Introduce GitHub Actions CI coverage for pull requests to ensure build and test checks run automatically. An initial workflow could:\n- Trigger on `pull_request` (and optionally `push` to main branches)\n- Install required toolchains (Rust stable, LLVM dependencies)\n- Run `cargo fmt --check`, `cargo clippy` (if configured), and `cargo test --workspace`\n- Invoke `cargo run -p tea-cli -- test --fail-fast` and `scripts/e2e.sh` where feasible\n- Cache build artifacts to speed up subsequent runs and upload sanitized logs on failure.\nDocument the workflow expectations so contributors understand the gates before merging.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-23T22:59:19.912801-05:00","updated_at":"2025-10-23T22:59:19.912801-05:00"}
{"id":"tea-lang-6","title":"Create Language Server Protocol implementation","description":"Build an LSP server for Tea to bring editor integration up to par. Initial feature set should prioritize:\n- Syntax-aware diagnostics surfaced as users type (compilation errors, lexical issues)\n- Go-to-definition, hover tooltips, and symbol lookup based on the compiler’s semantic model\n- Formatting hooks that leverage `tea-cli fmt`\n- Incremental analysis and caching so feedback stays responsive on larger projects\n- Extensible architecture for future features such as inline evaluation or refactorings.\nDocument setup instructions for popular editors (VS Code, Neovim, Helix) and provide demos or GIFs once functional.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-23T22:59:25.669345-05:00","updated_at":"2025-10-23T22:59:25.669345-05:00"}
{"id":"tea-lang-7","title":"Emit compiler warnings for bad code practices","description":"Enhance the compiler to detect and report common code hygiene issues. Focus areas could include:\n- Unused imports, variables, and function arguments\n- Deprecated APIs or language constructs\n- Shadowed bindings that may hide outer scope values\n- Suspicious control flow, such as unreachable code or always-true conditions\n- Configurable warning levels and suppression annotations so advanced users can opt out selectively.\nUpdate tests and docs to establish the new linting expectations and provide guidance on resolving warnings.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-23T22:59:30.641195-05:00","updated_at":"2025-10-23T22:59:30.641195-05:00"}
{"id":"tea-lang-8","title":"Adopt errors-as-values pattern","description":"Rework error handling so Tea programs can treat errors as first-class values. Key steps could include:\n- Introducing a lightweight result type (e.g., `Result\u003cT, E\u003e`) or equivalent pattern in the language\n- Refactoring the standard library to expose fallible operations via explicit error returns instead of panics or implicit exceptions\n- Updating core language constructs (pattern matching, async) to interoperate smoothly with the new error model\n- Providing ergonomics for error propagation, aggregation, and formatting\n- Documenting migration guidance and updating examples/tests to showcase idiomatic usage.\nEnsure runtime semantics stay predictable and compiler diagnostics guide users toward the new APIs.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-23T22:59:34.686238-05:00","updated_at":"2025-10-23T22:59:34.686238-05:00"}
