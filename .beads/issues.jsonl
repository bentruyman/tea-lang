{"id":"tee-lang-1","title":"feat: add struct lowering to llvm backend","description":"Teach the AOT/LLVM codegen to allocate struct instances, support named/positional constructors, and emit member loads so struct programs compile.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-20T23:45:55.578527-05:00","updated_at":"2025-10-21T00:25:02.801378-05:00","closed_at":"2025-10-21T00:25:02.801378-05:00","dependencies":[{"issue_id":"tee-lang-1","depends_on_id":"tee-lang-2","type":"blocks","created_at":"2025-10-20T23:46:07.095111-05:00","created_by":"bentruyman"}]}
{"id":"tee-lang-10","title":"epic: expand standard library foundations","description":"Define a roadmap for tee-lang's standard library so the language ships with batteries-included utilities. Scope includes identifying priority domains (I/O, networking, OS integration, assertions, HTTP, utilities), sequencing delivery, and tracking implementing issues.","status":"open","priority":2,"issue_type":"epic","created_at":"2025-10-21T00:38:15.722693-05:00","updated_at":"2025-10-21T00:38:15.722693-05:00","dependencies":[{"issue_id":"tee-lang-10","depends_on_id":"tee-lang-11","type":"parent-child","created_at":"2025-10-21T00:38:46.158911-05:00","created_by":"bentruyman"},{"issue_id":"tee-lang-10","depends_on_id":"tee-lang-12","type":"parent-child","created_at":"2025-10-21T00:38:49.715016-05:00","created_by":"bentruyman"},{"issue_id":"tee-lang-10","depends_on_id":"tee-lang-13","type":"parent-child","created_at":"2025-10-21T00:38:51.324915-05:00","created_by":"bentruyman"},{"issue_id":"tee-lang-10","depends_on_id":"tee-lang-14","type":"parent-child","created_at":"2025-10-21T00:38:52.882862-05:00","created_by":"bentruyman"},{"issue_id":"tee-lang-10","depends_on_id":"tee-lang-15","type":"parent-child","created_at":"2025-10-21T00:38:54.675986-05:00","created_by":"bentruyman"}]}
{"id":"tee-lang-11","title":"feat: add filesystem stdlib","description":"Implement a core `fs` module covering files and directories. Provide APIs for reading/writing text and binary data, streaming large files, creating/removing directories, and exposing metadata (size, timestamps, permissions). Ensure error handling aligns with tea-lang result conventions and document examples in docs/.","status":"closed","priority":2,"issue_type":"feature","assignee":"assistant","created_at":"2025-10-21T00:38:25.114282-05:00","updated_at":"2025-10-21T17:23:02.839153-05:00","closed_at":"2025-10-21T17:23:02.839153-05:00"}
{"id":"tee-lang-12","title":"feat: add networking stdlib","description":"Ship a `net` module that supports TCP and UDP sockets, hostname resolution, and non-blocking patterns compatible with the runtime event loop. Include safe defaults (timeouts, buffering) and sample programs demonstrating client/server usage.","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-21T00:38:27.815732-05:00","updated_at":"2025-10-21T00:38:27.815732-05:00"}
{"id":"tee-lang-13","title":"feat: expose os process stdlib","description":"Introduce an `os` module for environment introspection and process control. Provide APIs for env vars, command-line args, process spawning, exit codes, and high-resolution timers. Document platform-specific constraints and ensure cross-platform guardrails.","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-21T00:38:30.777387-05:00","updated_at":"2025-10-21T00:38:30.777387-05:00"}
{"id":"tee-lang-14","title":"feat: add assertions and core utilities","description":"Deliver an `assert` and `util` module that covers runtime assertions, invariant helpers, type guards, collection utilities, and string/number helpers commonly needed by user code. Align APIs with planned tea test harness and update examples to exercise the new helpers.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-21T00:38:33.4734-05:00","updated_at":"2025-10-21T17:37:27.583252-05:00","closed_at":"2025-10-21T17:37:27.583252-05:00"}
{"id":"tee-lang-15","title":"feat: add http client stdlib","description":"Provide an `http` module offering basic client capabilities: GET/POST helpers, streaming responses, header manipulation, and JSON convenience. Build atop the networking primitives and ensure TLS support hooks exist even if implemented later.","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-21T00:38:36.85894-05:00","updated_at":"2025-10-21T00:38:36.85894-05:00"}
{"id":"tee-lang-16","title":"feat: expand tea fmt path handling","description":"Enhance `tea fmt` so it accepts directories and multiple file paths. Recursively format `.tea` sources under a folder, honour `--check`, and ensure output makes it clear which files need changes. Update docs/tests to cover the multi-path behaviour.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-21T21:30:20.10906-05:00","updated_at":"2025-10-21T22:41:09.219893-05:00","closed_at":"2025-10-21T22:41:09.219893-05:00"}
{"id":"tee-lang-17","title":"lint: tighten formatter spacing for def signatures","description":"Update `tea fmt` so function signatures collapse excessive interior spacing. Patterns like `def print_user          (user: User)` should emit a single space before parameter lists. Extend formatter logic, plus tests, to reject/normalize extra spaces between identifier and `(` while preserving other alignment rules.","status":"closed","priority":2,"issue_type":"chore","created_at":"2025-10-21T21:55:23.665515-05:00","updated_at":"2025-10-21T22:37:43.690601-05:00","closed_at":"2025-10-21T22:37:43.690601-05:00"}
{"id":"tee-lang-18","title":"design: author CLI-centric stdlib roadmap","description":"Draft a CLI-focused standard library plan covering filesystem helpers, process/subprocess orchestration, streaming IO, and env/config access. Identify which capabilities belong in tea-runtime versus future Tea packages, and capture milestones so CLI authors can depend on a batteries-included toolkit.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-22T00:34:32.213468-05:00","updated_at":"2025-10-23T15:17:11.88293-05:00","closed_at":"2025-10-23T15:17:11.88293-05:00"}
{"id":"tee-lang-19","title":"feat: introduce support::cli argument parsing primitives","description":"Prototype a `support::cli` module that offers opinionated argument parsing and subcommand dispatch tailored for Tea CLI apps. Include ergonomic error reporting, generated help text, and a sample tool demonstrating usage so we can validate the UX before baking it into the standard library.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-22T00:34:41.559951-05:00","updated_at":"2025-10-23T15:00:57.590141-05:00","closed_at":"2025-10-23T15:00:57.590141-05:00"}
{"id":"tee-lang-2","title":"feat: extend runtime for struct values","description":"Update tea-runtime ABI to carry struct instances (value tags, payloads, printers, helpers) so LLVM-generated code can interoperate with the runtime.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-20T23:45:58.093653-05:00","updated_at":"2025-10-20T23:49:54.419982-05:00","closed_at":"2025-10-20T23:49:54.419982-05:00"}
{"id":"tee-lang-20","title":"feat: streamline tea build packaging for CLI binaries","description":"Extend the `tea build` pipeline with single-file bundling, reproducible build metadata, cross-compilation switches, and checksum/signature emission so CLI teams can distribute binaries confidently. Document the workflow and surface helpful diagnostics when required toolchains are missing.","status":"in_progress","priority":2,"issue_type":"task","created_at":"2025-10-22T00:34:47.908709-05:00","updated_at":"2025-10-23T00:06:08.0629-05:00"}
{"id":"tee-lang-21","title":"feat: add pipeline-friendly IO and codec helpers","description":"Build out a CLI-first IO surface: ergonomic stdin/stdout streaming, helpers for piping Tea programs, and standard JSON/YAML codecs that interoperate cleanly with other tools. Ensure APIs cover both synchronous scripting and future async needs, with examples demonstrating glue-code workflows.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-22T00:34:52.338933-05:00","updated_at":"2025-10-22T18:13:45.939268-05:00","closed_at":"2025-10-22T18:13:45.939268-05:00"}
{"id":"tee-lang-22","title":"feat: design CLI-focused tea test snapshots","description":"Extend the upcoming `tea test` harness with CLI-centric assertions—stdout/stderr snapshots, exit code checks, and golden file comparisons—so command-line tools can be validated end-to-end. Define the test file format and add examples covering success and failure diagnostics.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-22T00:34:59.992995-05:00","updated_at":"2025-10-22T17:53:48.14252-05:00","closed_at":"2025-10-22T17:53:48.14252-05:00"}
{"id":"tee-lang-23","title":"feat: harden diagnostics for CLI authoring","description":"Improve resolver/type checker coverage and diagnostic formatting so CLI scripts fail fast with actionable, span-rich errors. Prioritise undefined binding, type mismatch, and module import errors; add CLI-focused examples to confirm the improved feedback loop.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-22T00:35:08.697031-05:00","updated_at":"2025-10-22T14:15:13.447504-05:00","closed_at":"2025-10-22T14:15:13.447504-05:00"}
{"id":"tee-lang-24","title":"feat: implement tea-level test blocks and harness","description":"Extend the compiler/runtime to support `test \"name\" ... end` blocks, collect them into a harness, and run them via `tea test`. Ensure failing tests don't abort subsequent ones, surface assertion/runtime errors clearly, and integrate discovery/filtering into the CLI.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-22T01:01:53.165771-05:00","updated_at":"2025-10-22T01:35:09.717939-05:00","closed_at":"2025-10-22T01:35:09.717939-05:00"}
{"id":"tee-lang-25","title":"Tighten YAML decode typing","description":"Improve the typing surfaced by `std.yaml.decode` (and related helpers) so decoded dict/list values carry precise element types instead of defaulting to `Unknown`. Audit the type checker and LLVM/runtime conversions to honor known literal shapes and propagate richer typing downstream.","status":"in_progress","priority":2,"issue_type":"task","created_at":"2025-10-22T20:19:41.739308-05:00","updated_at":"2025-10-22T23:43:34.599068-05:00"}
{"id":"tee-lang-26","title":"Handle generics in VM bytecode backend","description":"Extend the Tea VM bytecode compiler/runtime to support generic functions and structs with the same semantics as the LLVM backend. This includes emitting monomorphized function variants where needed, instantiating generic structs at runtime, and ensuring call sites pick the right specialization. Update tests/examples to exercise generics through the VM path.","status":"in_progress","priority":2,"issue_type":"task","created_at":"2025-10-22T21:06:07.564376-05:00","updated_at":"2025-10-22T21:22:31.443608-05:00"}
{"id":"tee-lang-27","title":"Allow generic definitions inside modules","description":"Enable generic functions and structs declared within `use`-able modules (std or user-defined) to expose usable specializations when imported. Ensure metadata is exported/imported so the resolver/type checker and both backends can discover module-scoped generic types. Add regression coverage for module generics.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-22T21:06:12.781785-05:00","updated_at":"2025-10-22T23:21:39.766745-05:00"}
{"id":"tee-lang-28","title":"Improve generic diagnostics and tooling","description":"Polish the user experience for generics by surfacing better diagnostics (e.g., unmapped type params, mismatched specialization arity) and adding CLI/help updates. Update `tea test` and formatter to understand generic syntax where applicable, and document current generics support and limitations.","status":"in_progress","priority":2,"issue_type":"task","created_at":"2025-10-22T21:06:20.67346-05:00","updated_at":"2025-10-22T23:32:29.370548-05:00"}
{"id":"tee-lang-29","title":"feat: expand std.fs for CLI workflows","description":"Grow `std.fs` beyond basic reads/writes so CLI tools can manage directories and files ergonomically.\n\nScope:\n- Add globbing helpers, recursive directory iteration, and metadata accessors (permissions, symlinks, readonly flags) exposed through the runtime with VM+LLVM parity.\n- Provide atomic write utilities (write temp + rename) and convenience helpers for ensuring parent directories exist.\n- Surface Tea-flavoured diagnostics when operations fail (path, errno-like message) and document platform caveats.\n- Ship examples under `examples/cli/` plus runtime/CLI tests covering success and failure cases.\n\nAcceptance:\n- New APIs are documented in `docs/cli-stdlib-roadmap.md` (or dedicated doc) and referenced from README.\n- `tea build` works for the new examples; snapshot/VM tests cover representative behaviours.\n- Fallback behaviour is defined for unsupported platforms (e.g., permissions on Windows).","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-23T15:07:49.275715-05:00","updated_at":"2025-10-23T16:33:16.679001-05:00","closed_at":"2025-10-23T16:33:16.679001-05:00"}
{"id":"tee-lang-3","title":"test: cover structs across vm and llvm","description":"Add VM bytecode regressions for struct constructors/field access plus an LLVM smoke (extend scripts/e2e.sh) that builds and runs examples/structs.tea.","notes":"continuing struct coverage work","status":"closed","priority":2,"issue_type":"task","assignee":"assistant","created_at":"2025-10-20T23:46:00.961129-05:00","updated_at":"2025-10-21T00:32:06.615611-05:00","closed_at":"2025-10-21T00:32:06.615611-05:00","dependencies":[{"issue_id":"tee-lang-3","depends_on_id":"tee-lang-1","type":"blocks","created_at":"2025-10-20T23:46:08.907928-05:00","created_by":"bentruyman"}]}
{"id":"tee-lang-30","title":"feat: add std.path module","description":"Introduce a dedicated `std.path` module so CLI scripts can join, normalise, and inspect filesystem paths without manual string hacking.\n\nScope:\n- Provide join/split helpers, normalisation (collapsing `.`/`..`), relative→absolute conversion, extension manipulation, and platform-specific separators (with Windows/macOS/Linux awareness).\n- Ensure runtime implementations land with VM + LLVM coverage and expose errors when paths are invalid or unsupported.\n- Add examples demonstrating cross-platform-safe path handling (`examples/cli/path_utils.tea`) and corresponding tests.\n- Document semantics and platform caveats in the CLI stdlib roadmap/README.\n\nAcceptance:\n- Module is exported via the resolver/type checker (`use \"std.path\"`) with type signatures for each helper.\n- Tests cover both happy path and edge cases (root, UNC paths, trailing separators).\n- `tea build` on examples succeeds for LLVM backend.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-23T15:07:54.926166-05:00","updated_at":"2025-10-23T21:45:35.222117-05:00"}
{"id":"tee-lang-31","title":"feat: add std.env module","description":"Provide an `std.env` module so CLI programs can interact with environment variables, working directories, and temporary paths in a cross-platform way.\n\nScope:\n- Expose getters/setters for env vars, helpers for required variables with diagnostics, current working directory access, temporary directory creation, and home/config directory discovery.\n- Implement runtime support with VM + LLVM parity, returning Tea-native errors when operations fail or are unsupported.\n- Add examples (`examples/cli/env.tea`) and tests (runtime + CLI) covering both successful usage and missing-variable failures.\n- Document behaviour in the CLI stdlib roadmap and README, including platform caveats (Windows case-insensitivity, restricted env mutations).\n\nAcceptance:\n- Resolver/type checker recognise `use \"std.env\"` and validate call signatures.\n- Tests assert that env changes are scoped appropriately (process-wide) and snapshot failure messages are friendly.\n- Examples build with `tea build` (LLVM backend) and run successfully.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-23T15:08:01.469247-05:00","updated_at":"2025-10-23T22:12:12.189016-05:00"}
{"id":"tee-lang-32","title":"feat: add std.process module","description":"Ship a `std.process` module that lets Tea CLIs spawn and manage subprocesses with ergonomic stdout/stderr streaming and exit handling.\n\nScope:\n- Provide helpers for running commands with argument arrays, environment/working-directory overrides, and capturing/streaming output (stdout/stderr) in real time.\n- Expose synchronous wait semantics plus non-blocking read loops suitable for piping data between processes.\n- Integrate with snapshot testing (`support.cli.capture`) and ensure VM + LLVM backends share behaviour.\n- Add examples (`examples/cli/process.tea`) demonstrating pipelines and error handling, plus tests verifying exit codes, signal handling, and failure messaging.\n- Document security considerations (shell injection, PATH lookup) and platform differences in the roadmap/README.\n\nAcceptance:\n- Resolver/type checker surface appropriate types (structs for process handles, result tuples, etc.).\n- Runtime errors include command, exit status, and stderr summaries.\n- `tea build` can compile and run the examples on supported platforms.\n","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-23T15:08:05.867432-05:00","updated_at":"2025-10-23T15:08:05.867432-05:00"}
{"id":"tee-lang-33","title":"chore: standardise std module diagnostics","description":"As new CLI-centric std modules land, ensure all runtime errors surface consistent, span-rich diagnostics.\n\nScope:\n- Define a shared diagnostic helper in `src/support/` that maps OS errors into Tea error structs/messages consumed by both VM and LLVM backends.\n- Update existing modules (`std.fs`, `std.io`, `support.cli`) to emit the new diagnostic style.\n- Document expected wording/format and add regression tests covering common failure surfaces.\n\nAcceptance:\n- New helper is used across at least `std.fs`, `std.io`, and `support.cli`.\n- Tests/snapshots confirm diagnostic formatting consistency.\n- Documentation references the helper so future modules adopt it.","status":"closed","priority":2,"issue_type":"chore","created_at":"2025-10-23T15:08:11.352111-05:00","updated_at":"2025-10-23T16:55:17.11084-05:00","closed_at":"2025-10-23T16:55:17.11084-05:00"}
{"id":"tee-lang-34","title":"Refactor module imports to require explicit aliases","description":"## Summary\nAdopt explicit aliases in `use` statements so modules are referenced with a chosen prefix (e.g. `use fs = \"std.fs\"`). This will eliminate name collisions, improve readability, and aid future tooling.\n\n## Motivation\n- Avoid collisions when multiple modules export the same symbol.\n- Make symbol origins obvious (`fs.write_text` instead of bare `write_text`).\n- Enable better tree-shaking/static linking by tracking alias usage.\n\n## Scope\n- Parser: accept `use alias = \"module\"` syntax (keep legacy form temporarily behind a warning or feature gate).\n- Resolver/type checker: bind module members under the alias; disallow unqualified access to imported members.\n- Diagnostics: emit clear errors when aliases are missing or shadowed.\n- Formatter/LSP: update to preserve/suggest alias syntax.\n- Docs/examples/tests: switch imports to the new style and document migration guidance.\n\n## Acceptance Criteria\n- New syntax parses and resolves; `alias.symbol` access works in VM and LLVM backends.\n- Legacy `use \"std.fs\"` either errors with actionable message or is guarded behind configurable compatibility mode.\n- All stdlib examples updated to the explicit alias form.\n- Unit/integration tests covering duplicate aliases, missing aliases, and qualified access.","status":"in_progress","priority":2,"issue_type":"task","created_at":"2025-10-23T19:13:59.412592-05:00","updated_at":"2025-10-23T19:14:02.332522-05:00"}
{"id":"tee-lang-4","title":"Support generics","description":"Design and implement type parameter handling across parser, resolver, type checker, and codegen so functions and structs can be parameterized.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-21T00:30:07.536052-05:00","updated_at":"2025-10-22T21:14:53.604048-05:00"}
{"id":"tee-lang-5","title":"Add tea test harness","description":"Introduce a `tea test` command that discovers and runs compiler/runtime test suites, including golden outputs and integration coverage.","notes":"Blocked on implementing test block semantics and harness (tee-lang-24).","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-21T00:30:09.693411-05:00","updated_at":"2025-10-22T01:35:19.828167-05:00","closed_at":"2025-10-22T01:35:19.828167-05:00"}
{"id":"tee-lang-6","title":"Introduce tea fmt formatter","description":"Provide a `tea fmt` command that enforces canonical formatting for .tea sources and integrates with CLI workflows.","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-21T00:30:11.798926-05:00","updated_at":"2025-10-21T22:57:39.03052-05:00","closed_at":"2025-10-21T22:57:39.03052-05:00"}
{"id":"tee-lang-7","title":"Add const immutable bindings","description":"Extend language syntax and semantics with `const` bindings, enforcing immutability in resolver, type checker, and runtime.","status":"closed","priority":2,"issue_type":"feature","assignee":"assistant","created_at":"2025-10-21T00:30:13.971596-05:00","updated_at":"2025-10-21T18:06:47.604151-05:00","closed_at":"2025-10-21T18:06:47.604151-05:00"}
{"id":"tee-lang-8","title":"Implement lambda expressions","description":"Support lambda literals with closure capture across parser, resolver, bytecode/LLVM lowering, and runtime invocation.","notes":"starting lambda expressions implementation","status":"in_progress","priority":2,"issue_type":"feature","assignee":"assistant","created_at":"2025-10-21T00:30:17.683921-05:00","updated_at":"2025-10-21T00:50:27.483848-05:00"}
{"id":"tee-lang-9","title":"chore: eliminate LLVM pointer deprecation warnings","description":"The LLVM backend emits multiple `ptr_type` deprecation warnings during `cargo build`/`cargo test`. Update `tea-compiler/src/aot/mod.rs` to use the modern `Context::ptr_type` APIs (or other recommended replacements) so the build runs cleanly on LLVM 15+. Confirm the change across the full CLI smoke (`scripts/e2e.sh`).","notes":"investigating LLVM ptr_type deprecation cleanup","status":"closed","priority":3,"issue_type":"task","assignee":"assistant","created_at":"2025-10-21T00:33:46.255098-05:00","updated_at":"2025-10-21T00:42:22.2965-05:00","closed_at":"2025-10-21T00:42:22.2965-05:00"}
