# Expect: Team scoreboard, Ada: 7 wins / 3 losses, Grace: 9 wins / 1 loss, Linus: 5 wins / 5 losses, Top team: Grace, Grace is dominating the league, Fan favorite: Grace: 9 wins / 1 loss, Sorry, Unknown is not on the schedule
use debug = "std.debug"
use util = "std.util"

struct Team {
  name: String
  wins: Int
  losses: Int
}

error TeamError {
  NotFound(name: String)
}

const format_team = |team: Team| => `${team.name}: ${team.wins} wins / ${team.losses} losses`

const teams = [
  Team(name: "Ada", wins: 7, losses: 3),
  Team(name: "Grace", wins: 9, losses: 1),
  Team(name: "Linus", wins: 5, losses: 5)
]

debug.print("Team scoreboard")

var index = 0
while index < util.len(teams)
  debug.print(format_team(teams[index]))
  index = index + 1
end

var champion = teams[0]
var next_index = 1

while next_index < util.len(teams)
  var contender = teams[next_index]

  if contender.wins > champion.wins
    champion = contender
  end

  next_index = next_index + 1
end

debug.print(`Top team: ${champion.name}`)

def describe_margin(team: Team) -> String
  var diff = team.wins - team.losses

  if diff == 0
    return `${team.name} is holding even`
  end

  if diff >= 1 && diff <= 3
    return `${team.name} is edging ahead`
  end

  `${team.name} is dominating the league`
end

debug.print(describe_margin(champion))

def find_team(name: String) -> Team ! TeamError.NotFound
  var idx = 0
  while idx < util.len(teams)
    var candidate = teams[idx]

    if candidate.name == name
      return candidate
    end

    idx = idx + 1
  end

  throw TeamError.NotFound(name)
end

def announce_favorite(name: String) -> String
  var team = find_team(name) catch err
  case is TeamError.NotFound
    return `Sorry, ${err.name} is not on the schedule`
  case _
    return "Unexpected lookup issue"
end

`Fan favorite: ${format_team(team)}`
end

debug.print(announce_favorite("Grace"))
debug.print(announce_favorite("Unknown"))
