use super::{StdArity, StdFunction, StdFunctionKind, StdModule, StdType};

const FS_FUNCTIONS: &[StdFunction] = &[
    StdFunction {
        name: "read_text",
        kind: StdFunctionKind::FsReadText,
        arity: StdArity::Exact(1),
        params: &[StdType::String],
        return_type: StdType::String,
    },
    StdFunction {
        name: "write_text",
        kind: StdFunctionKind::FsWriteText,
        arity: StdArity::Exact(2),
        params: &[StdType::String, StdType::String],
        return_type: StdType::Nil,
    },
    StdFunction {
        name: "write_text_atomic",
        kind: StdFunctionKind::FsWriteTextAtomic,
        arity: StdArity::Exact(2),
        params: &[StdType::String, StdType::String],
        return_type: StdType::Nil,
    },
    StdFunction {
        name: "read_bytes",
        kind: StdFunctionKind::FsReadBytes,
        arity: StdArity::Exact(1),
        params: &[StdType::String],
        return_type: StdType::List,
    },
    StdFunction {
        name: "write_bytes",
        kind: StdFunctionKind::FsWriteBytes,
        arity: StdArity::Exact(2),
        params: &[StdType::String, StdType::List],
        return_type: StdType::Nil,
    },
    StdFunction {
        name: "write_bytes_atomic",
        kind: StdFunctionKind::FsWriteBytesAtomic,
        arity: StdArity::Exact(2),
        params: &[StdType::String, StdType::List],
        return_type: StdType::Nil,
    },
    StdFunction {
        name: "create_dir",
        kind: StdFunctionKind::FsCreateDir,
        arity: StdArity::Range {
            min: 1,
            max: Some(2),
        },
        params: &[StdType::String, StdType::Bool],
        return_type: StdType::Nil,
    },
    StdFunction {
        name: "ensure_dir",
        kind: StdFunctionKind::FsEnsureDir,
        arity: StdArity::Exact(1),
        params: &[StdType::String],
        return_type: StdType::Nil,
    },
    StdFunction {
        name: "ensure_parent",
        kind: StdFunctionKind::FsEnsureParent,
        arity: StdArity::Exact(1),
        params: &[StdType::String],
        return_type: StdType::Nil,
    },
    StdFunction {
        name: "remove",
        kind: StdFunctionKind::FsRemove,
        arity: StdArity::Exact(1),
        params: &[StdType::String],
        return_type: StdType::Nil,
    },
    StdFunction {
        name: "exists",
        kind: StdFunctionKind::FsExists,
        arity: StdArity::Exact(1),
        params: &[StdType::String],
        return_type: StdType::Bool,
    },
    StdFunction {
        name: "is_dir",
        kind: StdFunctionKind::FsIsDir,
        arity: StdArity::Exact(1),
        params: &[StdType::String],
        return_type: StdType::Bool,
    },
    StdFunction {
        name: "is_symlink",
        kind: StdFunctionKind::FsIsSymlink,
        arity: StdArity::Exact(1),
        params: &[StdType::String],
        return_type: StdType::Bool,
    },
    StdFunction {
        name: "size",
        kind: StdFunctionKind::FsSize,
        arity: StdArity::Exact(1),
        params: &[StdType::String],
        return_type: StdType::Int,
    },
    StdFunction {
        name: "modified",
        kind: StdFunctionKind::FsModified,
        arity: StdArity::Exact(1),
        params: &[StdType::String],
        return_type: StdType::Int,
    },
    StdFunction {
        name: "permissions",
        kind: StdFunctionKind::FsPermissions,
        arity: StdArity::Exact(1),
        params: &[StdType::String],
        return_type: StdType::Int,
    },
    StdFunction {
        name: "is_readonly",
        kind: StdFunctionKind::FsIsReadonly,
        arity: StdArity::Exact(1),
        params: &[StdType::String],
        return_type: StdType::Bool,
    },
    StdFunction {
        name: "list_dir",
        kind: StdFunctionKind::FsListDir,
        arity: StdArity::Exact(1),
        params: &[StdType::String],
        return_type: StdType::List,
    },
    StdFunction {
        name: "walk",
        kind: StdFunctionKind::FsWalk,
        arity: StdArity::Exact(1),
        params: &[StdType::String],
        return_type: StdType::List,
    },
    StdFunction {
        name: "glob",
        kind: StdFunctionKind::FsGlob,
        arity: StdArity::Exact(1),
        params: &[StdType::String],
        return_type: StdType::List,
    },
    StdFunction {
        name: "metadata",
        kind: StdFunctionKind::FsMetadata,
        arity: StdArity::Exact(1),
        params: &[StdType::String],
        return_type: StdType::Dict,
    },
    StdFunction {
        name: "open_read",
        kind: StdFunctionKind::FsOpenRead,
        arity: StdArity::Exact(1),
        params: &[StdType::String],
        return_type: StdType::Int,
    },
    StdFunction {
        name: "read_chunk",
        kind: StdFunctionKind::FsReadChunk,
        arity: StdArity::Exact(2),
        params: &[StdType::Int, StdType::Int],
        return_type: StdType::List,
    },
    StdFunction {
        name: "close",
        kind: StdFunctionKind::FsClose,
        arity: StdArity::Exact(1),
        params: &[StdType::Int],
        return_type: StdType::Nil,
    },
];

pub const MODULE: StdModule = StdModule {
    path: "std.fs",
    functions: FS_FUNCTIONS,
};
