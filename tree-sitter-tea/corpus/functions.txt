================================================================================
Functions
================================================================================

pub def add(a: Int, b: Int) -> Int
  return a + b
end

def identity[T](value: T) -> T
  value
end

test "calls functions"
  var result = add(1, 2)
  identity(result)
end
--------------------------------------------------------------------------------
(source_file
  (function_definition
    "pub"
    name: (identifier)
    parameters: (parameter_list
      (parameter
        name: (identifier)
        type: (type_annotation (identifier)))
      (parameter
        name: (identifier)
        type: (type_annotation (identifier))))
    return_type: (type_annotation (identifier))
    body: (block
      (return_statement
        value: (binary_expression
          left: (identifier)
          operator: "+"
          right: (identifier)))))
  "end"
  (function_definition
    name: (identifier)
    type_parameters: (type_parameters (identifier))
    parameters: (parameter_list
      (parameter
        name: (identifier)
        type: (type_annotation (identifier))))
    return_type: (type_annotation (identifier))
    body: (block
      (expression_statement
        (identifier))))
  "end"
  (test_block
    name: (string)
    body: (block
      (var_declaration
        name: (identifier)
        value: (call_expression
          function: (identifier)
          arguments: (argument_list
            (argument (number))
            (argument (number)))))
      (expression_statement
        (call_expression
          function: (identifier)
          arguments: (argument_list
            (argument (identifier)))))))
  "end")

================================================================================
Error Annotations
================================================================================

def risky(text: String) -> String ! InvalidText
  throw InvalidText()
end

def get_file(path: String) -> String ! { FsError.NotFound, FsError.Permission }
  try open(path) catch "fallback"
end
--------------------------------------------------------------------------------
(source_file
  (function_definition
    name: (identifier)
    parameters: (parameter_list
      (parameter
        name: (identifier)
        type: (type_annotation (identifier))))
    return_type: (type_annotation (identifier))
    error_annotation: (error_annotation
      error: (error_type
        name: (identifier)))
    body: (block
      (throw_statement
        value: (call_expression
          function: (identifier)
          arguments: (argument_list)))))
  "end"
  (function_definition
    name: (identifier)
    parameters: (parameter_list
      (parameter
        name: (identifier)
        type: (type_annotation (identifier))))
    return_type: (type_annotation (identifier))
    error_annotation: (error_annotation
      (error_type
        name: (identifier)
        variant: (identifier))
      (error_type
        name: (identifier)
        variant: (identifier)))
    body: (block
      (expression_statement
        (try_expression
          value: (call_expression
            function: (identifier)
            arguments: (argument_list
              (argument (identifier))))
          handler: (catch_clause
            fallback: (string))))))
  "end")
